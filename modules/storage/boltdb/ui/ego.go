// Generated by ego.
// DO NOT EDIT

package ui

import (
	"fmt"
	"github.com/boltdb/bolt"
	"github.com/xirtah/gopa-spider/modules/ui/common"
	"html"
	"io"
	"net/http"
	"path/filepath"
	"strings"
	"unsafe"
)

var _ = fmt.Sprint("") // just so that we can keep the fmt import for now
func Error(w io.Writer, err error) error {
	_, _ = io.WriteString(w, "\r\n\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"utf-8\">\r\n    <title>boltd</title>\r\n  </head>\r\n\r\n  <body class=\"error\">\r\n    <div class=\"container\">\r\n      <div class=\"header\">\r\n        <h3 class=\"text-muted\">Error</h3>\r\n      </div>\r\n\r\n      An error has occurred: ")
	_, _ = io.WriteString(w, html.EscapeString(fmt.Sprint(err)))
	_, _ = io.WriteString(w, "\r\n    </div> <!-- /container -->\r\n  </body>\r\n</html>\r\n")
	return nil
}
func Index(w io.Writer) error {
	_, _ = io.WriteString(w, "\r\n\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta http-equiv=\"refresh\" content=\"0; url=page\">\r\n  </head>\r\n\r\n  <body>redirecting...</body>\r\n</html>\r\n")
	return nil
}
func nav(w io.Writer, tx *bolt.Tx) error {
	_, _ = io.WriteString(w, "\r\n\r\n")
	_, _ = io.WriteString(w, "\r\n")
	_, _ = io.WriteString(w, "\r\n\r\n")
	_, _ = io.WriteString(w, html.EscapeString(fmt.Sprint(filepath.Base(tx.DB().Path()))))
	return nil
}
func Page(w http.ResponseWriter, r *http.Request, tx *bolt.Tx, indexes []int, directID int, showUsage bool) error {
	_, _ = io.WriteString(w, "\r\n\r\n")
	_, _ = io.WriteString(w, "\r\n")
	_, _ = io.WriteString(w, "\r\n")
	_, _ = io.WriteString(w, "\r\n")
	_, _ = io.WriteString(w, "\r\n")
	_, _ = io.WriteString(w, "\r\n")
	_, _ = io.WriteString(w, "\r\n\r\n")

	p, ids, err := find(tx, directID, indexes)
	if err != nil {
		return err
	}

	// Generate page stats.
	pageSize := tx.DB().Info().PageSize
	stats := p.stats(pageSize)

	// Generate histogram of all nested page usage.
	var histogram map[int]int
	if showUsage {
		histogram = usage(tx, p.id)
	}

	_, _ = io.WriteString(w, "\r\n\r\n")
	common.Head(w, filepath.Base(tx.DB().Path()), "")
	_, _ = io.WriteString(w, "\r\n\r\n  <link rel=\"stylesheet\" href=\"/static/assets/css/tasks.css\" />\r\n  <script src=\"/static/assets/js/jquery.timeago.js\"></script>\r\n  <script src=\"/static/assets/js/page/tasks.js\"></script>\r\n <style>\r\n    table {\r\n      border-collapse:collapse;\r\n      word-break:break-all; word-wrap:break-word;\r\n    }\r\n\r\n    table, th, td {\r\n      border: 1px solid black;\r\n    }\r\n\r\n    th, td {\r\n      min-width: 100px;\r\n      padding: 2px 5px;\r\n    }\r\n  </style>\r\n\r\n")
	common.Body(w)
	_, _ = io.WriteString(w, "\r\n")
	common.Nav(w, r, "BoltDB")
	_, _ = io.WriteString(w, "\r\n\r\n<div class=\"uk-container uk-container-center\">\r\n\r\n    <div class=\"uk-grid\" data-uk-grid-margin>\r\n        <div class=\"uk-width-large-1-1 uk-visible-large\">\r\n            <div class=\"uk-alert\" >Database: ")
	nav(w, tx)
	_, _ = io.WriteString(w, "</div>\r\n\r\n\r\n          <h2>\r\n                ")
	for i, id := range ids {
		_, _ = io.WriteString(w, "\r\n                  ")
		if i > 0 {
			_, _ = io.WriteString(w, "&raquo;")
		}
		_, _ = io.WriteString(w, "\r\n                  <a href=\"")
		_, _ = io.WriteString(w, html.EscapeString(fmt.Sprint(pagelink(indexes[:i+1]))))
		_, _ = io.WriteString(w, "\">#")
		_, _ = io.WriteString(w, html.EscapeString(fmt.Sprint(id)))
		_, _ = io.WriteString(w, "</a>\r\n                ")
	}
	_, _ = io.WriteString(w, "\r\n              </h2>\r\n\r\n              <h3>Page Information</h3>\r\n              <p>\r\n                <strong>ID:</strong> ")
	_, _ = io.WriteString(w, html.EscapeString(fmt.Sprint(comma(int(p.id)))))
	_, _ = io.WriteString(w, "<br/>\r\n                <strong>Type:</strong> ")
	_, _ = io.WriteString(w, html.EscapeString(fmt.Sprint(fmt.Sprintf("%s (%x)", p.typ(), p.flags))))
	_, _ = io.WriteString(w, "<br/>\r\n                <strong>Overflow:</strong> ")
	_, _ = io.WriteString(w, html.EscapeString(fmt.Sprint(p.overflow)))
	_, _ = io.WriteString(w, "<br/><br/>\r\n\r\n                <strong>Alloc:</strong> ")
	_, _ = io.WriteString(w, html.EscapeString(fmt.Sprint(comma(stats.alloc))))
	_, _ = io.WriteString(w, "<br/>\r\n                <strong>In Use:</strong> ")
	_, _ = io.WriteString(w, html.EscapeString(fmt.Sprint(comma(stats.inuse))))
	_, _ = io.WriteString(w, "<br/>\r\n                <strong>Utilization:</strong> ")
	_, _ = io.WriteString(w, html.EscapeString(fmt.Sprint(fmt.Sprintf("%.2f%%", stats.utilization*100))))
	_, _ = io.WriteString(w, "<br/>\r\n              </p>\r\n\r\n              ")
	if (p.flags & branchPageFlag) != 0 {
		_, _ = io.WriteString(w, "\r\n                <h3>Branch Elements (")
		_, _ = io.WriteString(w, html.EscapeString(fmt.Sprint(p.count)))
		_, _ = io.WriteString(w, ")</h3>\r\n                <table>\r\n                  <thead>\r\n                    <tr>\r\n                      <th align=\"left\">Key</th>\r\n                      <th align=\"left\">Page ID</th>\r\n                      <th align=\"left\">Size (k)</th>\r\n                      <th align=\"center\">%%Util</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    ")
		for i := uint16(0); i < p.count; i++ {
			_, _ = io.WriteString(w, "\r\n                      ")
			e := p.branchPageElement(i)
			_, _ = io.WriteString(w, "\r\n                      ")
			subpage := pageAt(tx, e.pgid)
			_, _ = io.WriteString(w, "\r\n                      ")
			substats := subpage.stats(pageSize)
			_, _ = io.WriteString(w, "\r\n                      <tr>\r\n                        <td>")
			_, _ = io.WriteString(w, html.EscapeString(fmt.Sprint(trunc(tostr(e.key()), 150))))
			_, _ = io.WriteString(w, "</td>\r\n                        <td><a href=\"")
			_, _ = io.WriteString(w, html.EscapeString(fmt.Sprint(subpagelink(indexes, int(i)))))
			_, _ = io.WriteString(w, "\">")
			_, _ = io.WriteString(w, html.EscapeString(fmt.Sprint(e.pgid)))
			_, _ = io.WriteString(w, "</a></td>\r\n                        <td>")
			_, _ = io.WriteString(w, html.EscapeString(fmt.Sprint(len(e.key()))))
			_, _ = io.WriteString(w, "</td>\r\n                        <td align=\"right\">")
			_, _ = io.WriteString(w, html.EscapeString(fmt.Sprint(fmt.Sprintf("%.2f%%", substats.utilization*100))))
			_, _ = io.WriteString(w, "</td>\r\n                      </tr>\r\n                    ")
		}
		_, _ = io.WriteString(w, "\r\n                  </tbody>\r\n                </table>\r\n\r\n              ")
	} else if (p.flags & leafPageFlag) != 0 {
		_, _ = io.WriteString(w, "\r\n                <h3>Leaf Elements (")
		_, _ = io.WriteString(w, html.EscapeString(fmt.Sprint(p.count)))
		_, _ = io.WriteString(w, ")</h3>\r\n                <table>\r\n                  <thead>\r\n                    <tr>\r\n                      <th align=\"left\">Key</th>\r\n                      <th align=\"left\">Value</th>\r\n                      <th align=\"left\">Size (k/v)</th>\r\n                      <th align=\"center\">%%Util</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    ")
		for i := uint16(0); i < p.count; i++ {
			_, _ = io.WriteString(w, "\r\n                      ")
			e := p.leafPageElement(i)
			_, _ = io.WriteString(w, "\r\n                      ")
			if (e.flags & bucketLeafFlag) != 0 {
				_, _ = io.WriteString(w, "\r\n                        ")
				b := ((*bucket)(unsafe.Pointer(&e.value()[0])))
				_, _ = io.WriteString(w, "\r\n                        ")

				util := "-"
				if b.root != 0 {
					substats := pageAt(tx, b.root).stats(pageSize)
					util = fmt.Sprintf("%.2f%%", substats.utilization*100)
				}

				_, _ = io.WriteString(w, "\r\n                        <tr>\r\n                          <td><strong>")
				_, _ = io.WriteString(w, html.EscapeString(fmt.Sprint(trunc(tostr(e.key()), 150))))
				_, _ = io.WriteString(w, "</strong></td>\r\n                          <td>\r\n                            &lt;bucket(root=")
				if b.root != 0 {
					_, _ = io.WriteString(w, "<a href=\"")
					_, _ = io.WriteString(w, html.EscapeString(fmt.Sprint(subpagelink(indexes, int(i)))))
					_, _ = io.WriteString(w, "\">")
				}
				_, _ = io.WriteString(w, html.EscapeString(fmt.Sprint(b.root)))
				if b.root != 0 {
					_, _ = io.WriteString(w, "</a>")
				}
				_, _ = io.WriteString(w, "; seq=")
				_, _ = io.WriteString(w, html.EscapeString(fmt.Sprint(b.sequence)))
				_, _ = io.WriteString(w, ")&gt;\r\n                          </td>\r\n                          <td>")
				_, _ = io.WriteString(w, html.EscapeString(fmt.Sprint(len(e.key()))))
				_, _ = io.WriteString(w, " / ")
				_, _ = io.WriteString(w, html.EscapeString(fmt.Sprint(len(e.value()))))
				_, _ = io.WriteString(w, "</td>\r\n                          <td align=\"right\">")
				_, _ = io.WriteString(w, html.EscapeString(fmt.Sprint(util)))
				_, _ = io.WriteString(w, "</td>\r\n                        </tr>\r\n                      ")
			} else {
				_, _ = io.WriteString(w, "\r\n                        <tr>\r\n                          <td>")
				_, _ = io.WriteString(w, html.EscapeString(fmt.Sprint(trunc(tostr(e.key()), 150))))
				_, _ = io.WriteString(w, "</td>\r\n                          <td>")
				_, _ = io.WriteString(w, html.EscapeString(fmt.Sprint(trunc(tostr(e.value()), 5000))))
				_, _ = io.WriteString(w, "</td>\r\n                          <td>")
				_, _ = io.WriteString(w, html.EscapeString(fmt.Sprint(len(e.key()))))
				_, _ = io.WriteString(w, " / ")
				_, _ = io.WriteString(w, html.EscapeString(fmt.Sprint(len(e.value()))))
				_, _ = io.WriteString(w, "</td>\r\n                          <td>&nbsp;</td>\r\n                        </tr>\r\n                      ")
			}
			_, _ = io.WriteString(w, "\r\n                    ")
		}
		_, _ = io.WriteString(w, "\r\n                  </tbody>\r\n                </table>\r\n              ")
	}
	_, _ = io.WriteString(w, "\r\n\r\n              ")
	if showUsage {
		_, _ = io.WriteString(w, "\r\n                ")

		mins, maxs, values := bucketize(histogram)
		vmax, maxlen := 0, 20
		for _, v := range values {
			if v > vmax {
				vmax = v
			}
		}

		_, _ = io.WriteString(w, "\r\n\r\n                <h3>Page Usage Histogram</h3>\r\n                <table>\r\n                  <thead>\r\n                    <tr>\r\n                      <th align=\"left\">Usage (bytes)</th>\r\n                      <th align=\"left\">Count</th>\r\n                      <th>&nbsp;</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    ")
		for i := 0; i < len(values); i++ {
			_, _ = io.WriteString(w, "\r\n                      <tr>\r\n                        <td>")
			_, _ = io.WriteString(w, html.EscapeString(fmt.Sprint(mins[i])))
			_, _ = io.WriteString(w, " - ")
			_, _ = io.WriteString(w, html.EscapeString(fmt.Sprint(maxs[i])))
			_, _ = io.WriteString(w, "</th>\r\n                        <td>")
			_, _ = io.WriteString(w, html.EscapeString(fmt.Sprint(values[i])))
			_, _ = io.WriteString(w, "</th>\r\n                        <td>")
			_, _ = io.WriteString(w, html.EscapeString(fmt.Sprint(strings.Repeat("█", int((float64(values[i])/float64(vmax))*float64(maxlen))))))
			_, _ = io.WriteString(w, "</td>\r\n                      </tr>\r\n                    ")
		}
		_, _ = io.WriteString(w, "\r\n                  </tbody>\r\n                </table>\r\n              ")
	} else {
		_, _ = io.WriteString(w, "\r\n                ")

		u, q := r.URL, r.URL.Query()
		q.Set("usage", "true")
		u.RawQuery = q.Encode()

		_, _ = io.WriteString(w, "\r\n\r\n                <p><a href=\"")
		_, _ = io.WriteString(w, html.EscapeString(fmt.Sprint(u.String())))
		_, _ = io.WriteString(w, "\">Show Page Usage</a></p>\r\n              ")
	}
	_, _ = io.WriteString(w, "\r\n\r\n              <br/><br/>\r\n              <form action=\"boltdb\" method=\"GET\">\r\n                Go to page: <input type=\"text\" name=\"id\"/>\r\n                <button type=\"submit\">Go</button>\r\n              </form>\r\n\r\n            </div>\r\n    </div>\r\n\r\n</div>\r\n\r\n")
	common.Footer(w)
	_, _ = io.WriteString(w, "\r\n")
	return nil
}
